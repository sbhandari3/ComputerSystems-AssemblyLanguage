41 2 0
38 1
8 252 396 301 347 1 0
8 318 396 367 347 1 0
22 258 348 424 328 0 \NUL
Read Register 1 Address
8 432 396 481 347 1 0
8 498 396 547 347 1 0
22 438 348 604 328 0 \NUL
Read Register 2 Address
20 720 414 779 395 0
wadr_0
20 654 414 713 395 0
wadr_1
8 606 396 655 347 1 0
8 672 396 721 347 1 0
22 612 348 767 328 0 \NUL
Write Register Address
20 480 414 539 395 0
adr2_1
20 546 414 605 395 0
adr2_0
20 366 414 425 395 0
adr1_0
20 300 414 359 395 0
adr1_1
19 174 108 233 89 0
reg0_2
19 162 84 221 65 0
reg0_3
19 198 156 257 137 0
reg0_0
19 186 132 245 113 0
reg0_1
11 258 108 285 10 0 1
22 144 36 255 16 0 \NUL
Register 0 Value
19 330 108 389 89 0
reg1_2
19 318 84 377 65 0
reg1_3
19 354 156 413 137 0
reg1_0
19 342 132 401 113 0
reg1_1
11 414 108 441 10 0 1
22 300 36 411 16 0 \NUL
Register 1 Value
19 486 108 545 89 0
reg2_2
19 474 84 533 65 0
reg2_3
19 510 156 569 137 0
reg2_0
19 498 132 557 113 0
reg2_1
11 570 108 597 10 0 1
22 456 36 567 16 0 \NUL
Register 2 Value
19 642 108 701 89 0
reg3_2
19 630 84 689 65 0
reg3_3
19 666 156 725 137 0
reg3_0
19 654 132 713 113 0
reg3_1
11 726 108 753 10 0 1
22 612 36 723 16 0 \NUL
Register 3 Value
19 648 264 707 245 0
alu_2
19 636 240 695 221 0
alu_3
19 672 312 731 293 0
alu_0
19 660 288 719 269 0
alu_1
11 732 264 759 166 0 1
22 648 192 724 172 0 \NUL
ALU Output
25 12 528 119 432
8 12 396 61 347 1 0
8 6 287 55 238 1 1
8 6 192 55 143 1 1
20 66 414 125 395 0
sel
20 60 210 119 191 0
clear
20 150 510 209 491 0
kpad_3
20 138 534 197 515 0
kpad_2
20 132 558 191 539 0
kpad_1
20 120 582 179 563 0
kpad_0
19 336 264 395 245 0
in1_2
19 324 240 383 221 0
in1_3
19 360 312 419 293 0
in1_0
19 348 288 407 269 0
in1_1
11 420 264 447 166 0 1
22 336 192 414 172 0 \NUL
ALU Input 1
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 128 10 0 \NUL
Bhandari, Suneet
22 12 54 80 34 0 \NUL
sugbhand
19 174 264 233 245 0
kpad_2
19 162 240 221 221 0
kpad_3
19 198 312 257 293 0
kpad_0
19 186 288 245 269 0
kpad_1
11 258 264 285 166 0 1
22 150 192 249 172 0 \NUL
Keypad Output
22 12 144 117 124 0 \NUL
Clear Registers
22 18 324 100 304 0 \NUL
Store Select
20 60 294 119 275 0
update
22 12 240 121 220 0 \NUL
Update Register
19 492 264 551 245 0
in2_2
19 480 240 539 221 0
in2_3
19 516 312 575 293 0
in2_0
19 504 288 563 269 0
in2_1
11 576 264 603 166 0 1
22 492 192 570 172 0 \NUL
ALU Input 2
22 18 348 230 328 0 \NUL
0 = Keypad input, 1 = ALU result
22 12 102 150 82 0 \NUL
CSE 12, Winter 2020
22 228 450 478 430 0 \NUL
Select clear to initialize registers to 0.
22 228 474 557 454 0 \NUL
Select store select to choose which value to store.
22 228 498 508 478 0 \NUL
Choose read and write register addresses.
22 228 522 727 502 0 \NUL
Read addresses = reg sources of ALU inputs, Write address = reg to save to
22 228 546 480 526 0 \NUL
Press update to save value to register
22 228 594 668 574 0 \NUL
You are only permitted to modify the header comment on this page.
25 12 528 119 432
8 6 192 55 143 1 1
1 652 371 655 404
1 718 371 721 404
1 478 371 481 404
1 544 371 547 404
1 364 371 367 404
1 298 371 301 404
1 218 74 259 74
1 259 80 230 98
1 259 86 242 122
1 259 92 254 146
1 374 74 415 74
1 415 80 386 98
1 415 86 398 122
1 415 92 410 146
1 530 74 571 74
1 571 80 542 98
1 571 86 554 122
1 571 92 566 146
1 686 74 727 74
1 727 80 698 98
1 727 86 710 122
1 727 92 722 146
1 692 230 733 230
1 733 236 704 254
1 733 242 716 278
1 733 248 728 302
1 61 200 52 167
1 67 404 58 371
1 380 230 421 230
1 421 236 392 254
1 421 242 404 278
1 421 248 416 302
1 151 500 116 500
1 139 524 116 506
1 133 548 116 512
1 121 572 116 518
1 218 230 259 230
1 259 236 230 254
1 259 242 242 278
1 259 248 254 302
1 61 284 52 262
1 536 230 577 230
1 577 236 548 254
1 577 242 560 278
1 577 248 572 302
38 2
19 30 426 89 407 0
wadr_1
19 30 408 89 389 0
wadr_0
19 30 354 89 335 0
adr2_1
19 30 336 89 317 0
adr2_0
19 30 294 89 275 0
adr1_1
19 30 276 89 257 0
adr1_0
19 34 240 93 221 0
sel
19 33 214 92 195 0
update
19 30 192 89 173 0
clear
22 294 42 484 22 0 \NUL
Placeholder signal/recievers
22 18 480 388 460 0 \NUL
These are only present so circuit simulates without error
22 18 504 290 484 0 \NUL
Remove these once logic is implemented
22 18 528 266 508 0 \NUL
You are permitted to modify this page
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 128 10 0 \NUL
Bhandari, Suneet
22 12 54 80 34 0 \NUL
sugbhand
22 12 102 150 82 0 \NUL
CSE 12, Winter 2020
38 3
20 333 174 392 155 0
reg0_0
19 12 176 71 157 0
kpad_0
24 281 260 330 188 1 1 1
19 9 329 68 310 0
update
19 8 351 67 332 0
clear
5 250 365 299 316 0
15 226 185 275 136
19 8 305 67 286 0
wadr_1
19 8 278 67 259 0
wadr_0
3 224 331 273 282 0 0
22 16 133 87 113 0 \NUL
Register 0
5 100 289 149 240 0
5 111 322 160 273 0
3 179 301 228 252 0 0
4 218 208 267 159 0 0
3 158 195 207 146 0 0
19 12 200 71 181 0
sel
5 98 215 147 166 0
19 13 227 72 208 0
alu_0
20 736 166 795 147 0
reg0_1
19 404 185 463 166 0
kpad_1
24 677 251 726 179 1 1 1
19 401 346 460 327 0
update
19 400 368 459 349 0
clear
5 666 365 715 316 0
15 614 189 663 140
19 400 320 459 301 0
wadr_1
19 401 292 460 273 0
wadr_0
3 631 327 680 278 0 0
5 481 302 530 253 0
5 486 334 535 285 0
3 556 299 605 250 0 0
4 609 225 658 176 0 0
3 547 196 596 147 0 0
19 402 211 461 192 0
sel
5 490 220 539 171 0
19 402 266 461 247 0
alu_1
20 345 411 404 392 0
reg0_2
19 15 406 74 387 0
kpad_2
24 286 496 335 424 1 1 1
19 13 568 72 549 0
update
19 8 595 67 576 0
clear
5 252 600 301 551 0
15 249 414 298 365
19 16 545 75 526 0
wadr_1
19 13 520 72 501 0
wadr_0
3 231 561 280 512 0 0
5 91 524 140 475 0
5 93 562 142 513 0
3 165 544 214 495 0 0
4 222 464 271 415 0 0
3 158 427 207 378 0 0
19 17 433 76 414 0
sel
5 86 441 135 392 0
19 15 458 74 439 0
alu_2
20 734 411 793 392 0
reg0_3
19 406 411 465 392 0
kpad_3
24 675 496 724 424 1 1 1
19 402 568 461 549 0
update
19 397 595 456 576 0
clear
5 641 600 690 551 0
15 619 416 668 367
19 405 545 464 526 0
wadr_1
19 405 522 464 503 0
wadr_0
3 620 561 669 512 0 0
5 480 524 529 475 0
5 481 565 530 516 0
3 554 544 603 495 0 0
4 607 444 656 395 0 0
3 545 431 594 382 0 0
19 409 437 468 418 0
sel
5 483 445 532 396 0
19 409 461 468 442 0
alu_3
19 8 251 67 232 0
sel
19 14 488 73 469 0
sel
3 143 252 192 203 0 0
3 146 481 195 432 0 0
19 403 240 462 221 0
sel
3 541 254 590 205 0 0
3 527 490 576 441 0 0
19 408 489 467 470 0
sel
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 128 10 0 \NUL
Bhandari, Suneet
22 12 54 80 34 0 \NUL
sugbhand
22 10 102 148 82 0 \NUL
CSE 12, Winter 2020
22 141 32 795 12 0 \NUL
My register 0 contains a flipflop and contains my Write Register Logic, which is two invertors and an
22 155 80 798 60 0 \NUL
through the AND gate. I used more logic gates to determine whether the input would come from the 
22 151 56 797 36 0 \NUL
AND gate since register 0 is 00 in the address which means it needs to be inverted in order to pass
22 153 104 780 84 0 \NUL
ALU or the keypad. The logic behind it is when the select switch is 0 the input is from the keypad
22 158 127 793 107 0 \NUL
and when the switch is 1 the output is from the ALU. Invertor for when select is 0 for the AND gate.
1 251 340 64 341
1 295 256 296 340
1 334 164 327 208
1 272 160 295 190
1 101 264 64 268
1 146 264 180 262
1 157 297 180 290
1 112 297 64 295
1 225 292 225 276
1 282 226 270 306
1 225 320 65 319
1 159 156 68 166
1 99 190 68 190
1 159 184 144 190
1 219 169 204 170
1 282 208 264 183
1 667 340 456 358
1 691 247 712 340
1 737 156 723 199
1 660 164 691 181
1 482 277 457 282
1 527 277 557 260
1 532 309 557 288
1 487 309 456 310
1 632 288 602 274
1 678 217 677 302
1 632 316 457 336
1 548 157 460 175
1 491 195 458 201
1 548 185 536 195
1 610 186 593 171
1 678 199 655 200
1 253 575 64 585
1 300 492 298 575
1 346 401 332 444
1 295 389 300 426
1 92 499 69 510
1 137 499 166 505
1 139 537 166 533
1 94 537 72 535
1 232 522 211 519
1 287 462 277 536
1 232 550 69 558
1 159 388 71 396
1 87 416 73 423
1 159 416 132 416
1 223 425 204 402
1 287 444 268 439
1 642 575 453 585
1 689 492 687 575
1 735 401 721 444
1 665 391 689 426
1 481 499 461 512
1 526 499 555 505
1 527 540 555 533
1 482 540 461 535
1 621 522 600 519
1 676 462 666 536
1 621 550 458 558
1 546 392 462 401
1 484 420 465 427
1 546 420 529 420
1 608 405 591 406
1 676 444 653 419
1 144 213 69 217
1 144 241 64 241
1 219 197 189 227
1 542 215 459 230
1 542 243 458 256
1 610 214 587 229
1 147 442 71 448
1 147 470 70 478
1 528 451 465 451
1 528 479 464 479
1 608 433 573 465
1 223 453 192 456
38 4
20 328 268 387 249 0
reg1_0
24 270 312 319 240 1 1 1
19 5 327 64 308 0
update
19 8 351 67 332 0
clear
5 221 365 270 316 0
15 238 226 287 177
19 6 301 65 282 0
wadr_1
19 8 276 67 257 0
wadr_0
3 147 305 196 256 0 0
22 22 139 93 119 0 \NUL
Register 1
5 90 317 139 268 0
3 206 322 255 273 0 0
19 8 174 67 155 0
kpad_0
4 217 246 266 197 0 0
3 161 201 210 152 0 0
19 10 200 69 181 0
sel
5 93 211 142 162 0
19 9 224 68 205 0
alu_0
19 7 249 66 230 0
sel
3 151 252 200 203 0 0
20 729 264 788 245 0
reg1_1
24 671 307 720 235 1 1 1
19 406 322 465 303 0
update
19 409 346 468 327 0
clear
5 622 360 671 311 0
15 639 221 688 172
19 407 296 466 277 0
wadr_1
19 409 271 468 252 0
wadr_0
3 548 300 597 251 0 0
5 491 312 540 263 0
3 607 317 656 268 0 0
19 409 169 468 150 0
kpad_1
4 618 241 667 192 0 0
3 566 196 615 147 0 0
19 411 195 470 176 0
sel
5 495 210 544 161 0
19 410 219 469 200 0
alu_1
19 408 244 467 225 0
sel
3 552 247 601 198 0 0
20 725 505 784 486 0
reg1_3
24 667 548 716 476 1 1 1
19 402 563 461 544 0
update
19 405 587 464 568 0
clear
5 618 600 667 551 0
15 626 432 675 383
19 403 537 462 518 0
wadr_1
19 405 512 464 493 0
wadr_0
3 544 541 593 492 0 0
5 487 553 536 504 0
3 601 558 650 509 0 0
19 405 410 464 391 0
kpad_2
4 618 473 667 424 0 0
3 555 412 604 363 0 0
19 407 436 466 417 0
sel
5 490 447 539 398 0
19 406 460 465 441 0
alu_2
19 404 485 463 466 0
sel
3 548 488 597 439 0 0
20 333 494 392 475 0
reg1_2
24 275 536 324 464 1 1 1
19 10 551 69 532 0
update
19 13 575 72 556 0
clear
5 226 589 275 540 0
15 243 450 292 401
19 11 525 70 506 0
wadr_1
19 13 500 72 481 0
wadr_0
3 152 529 201 480 0 0
5 95 541 144 492 0
3 211 543 260 494 0 0
19 13 398 72 379 0
kpad_2
4 222 470 271 421 0 0
3 163 400 212 351 0 0
19 15 424 74 405 0
sel
5 98 435 147 386 0
19 14 448 73 429 0
alu_2
19 12 473 71 454 0
sel
3 156 476 205 427 0 0
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 128 10 0 \NUL
Bhandari, Suneet
22 12 54 80 34 0 \NUL
sugbhand
22 12 102 150 82 0 \NUL
CSE 12, Winter 2020
22 141 31 789 11 0 \NUL
My register 1 contains a flipflop and contains my Write Register Logic, which is one invertor and an
22 155 80 798 60 0 \NUL
through the AND gate. I used more logic gates to determine whether the input would come from the 
22 151 56 797 36 0 \NUL
AND gate since register 1 is 01 in the address which means it needs to be inverted in order to pass
22 153 104 780 84 0 \NUL
ALU or the keypad. The logic behind it is when the select switch is 0 the input is from the keypad
22 158 127 793 107 0 \NUL
and when the switch is 1 the output is from the ALU. Invertor for when select is 0 for the AND gate.
1 222 340 64 341
1 284 308 267 340
1 329 258 316 260
1 284 201 284 242
1 148 266 64 266
1 91 292 62 291
1 148 294 136 292
1 207 283 193 280
1 271 278 252 297
1 61 317 207 311
1 162 162 64 164
1 94 186 66 190
1 162 190 139 186
1 218 207 207 176
1 152 213 65 214
1 152 241 63 239
1 218 235 197 227
1 271 260 263 221
1 623 335 465 336
1 685 303 668 335
1 730 254 717 255
1 685 196 685 237
1 549 261 465 261
1 492 287 463 286
1 549 289 537 287
1 608 278 594 275
1 672 273 653 292
1 462 312 608 306
1 567 157 465 159
1 496 185 467 185
1 567 185 541 185
1 619 202 612 171
1 553 208 466 209
1 553 236 464 234
1 619 230 598 222
1 672 255 664 216
1 619 575 461 577
1 681 544 664 575
1 726 495 713 496
1 672 407 681 478
1 545 502 461 502
1 488 528 459 527
1 545 530 533 528
1 602 519 590 516
1 668 514 647 533
1 458 553 602 547
1 556 373 461 400
1 491 422 463 426
1 556 401 536 422
1 619 434 601 387
1 549 449 462 450
1 549 477 460 475
1 619 462 594 463
1 668 496 664 448
1 227 564 69 565
1 289 532 272 564
1 334 484 321 484
1 289 425 289 466
1 153 490 69 490
1 96 516 67 515
1 153 518 141 516
1 212 504 198 504
1 276 502 257 518
1 66 541 212 532
1 164 361 69 388
1 99 410 71 414
1 164 389 144 410
1 223 431 209 375
1 157 437 70 438
1 157 465 68 463
1 223 459 202 451
1 276 484 268 445
38 5
22 11 134 82 114 0 \NUL
Register 2
20 328 268 387 249 0
reg2_0
24 270 312 319 240 1 1 1
19 5 327 64 308 0
update
19 8 351 67 332 0
clear
5 221 365 270 316 0
15 238 226 287 177
19 6 301 65 282 0
wadr_0
19 8 276 67 257 0
wadr_1
3 147 305 196 256 0 0
5 90 317 139 268 0
3 206 322 255 273 0 0
19 8 174 67 155 0
kpad_0
4 217 246 266 197 0 0
3 165 203 214 154 0 0
19 10 200 69 181 0
sel
5 93 211 142 162 0
19 9 224 68 205 0
alu_0
19 7 249 66 230 0
sel
3 151 252 200 203 0 0
20 729 264 788 245 0
reg2_1
24 671 307 720 235 1 1 1
19 406 322 465 303 0
update
19 409 346 468 327 0
clear
5 622 360 671 311 0
15 639 221 688 172
19 408 296 467 277 0
wadr_0
19 409 271 468 252 0
wadr_1
3 548 300 597 251 0 0
5 491 312 540 263 0
3 607 317 656 268 0 0
19 409 169 468 150 0
kpad_1
4 618 241 667 192 0 0
3 573 196 622 147 0 0
19 411 195 470 176 0
sel
5 494 206 543 157 0
19 410 219 469 200 0
alu_1
19 408 244 467 225 0
sel
3 552 247 601 198 0 0
20 725 505 784 486 0
reg2_3
24 667 548 716 476 1 1 1
19 402 563 461 544 0
update
19 405 587 464 568 0
clear
5 618 600 667 551 0
15 626 432 675 383
19 403 537 462 518 0
wadr_0
19 405 512 464 493 0
wadr_1
3 544 541 593 492 0 0
5 487 553 536 504 0
3 601 558 650 509 0 0
19 405 410 464 391 0
kpad_3
4 618 473 667 424 0 0
3 563 434 612 385 0 0
19 407 436 466 417 0
sel
5 490 447 539 398 0
19 406 460 465 441 0
alu_3
19 404 485 463 466 0
sel
3 548 488 597 439 0 0
20 333 494 392 475 0
reg2_2
24 275 536 324 464 1 1 1
19 10 551 69 532 0
update
19 13 575 72 556 0
clear
5 226 589 275 540 0
15 243 450 292 401
19 11 525 70 506 0
wadr_0
19 13 500 72 481 0
wadr_1
3 152 529 201 480 0 0
5 95 541 144 492 0
3 211 543 260 494 0 0
19 13 398 72 379 0
kpad_2
4 222 470 271 421 0 0
3 174 428 223 379 0 0
19 15 424 74 405 0
sel
5 98 435 147 386 0
19 14 448 73 429 0
alu_2
19 12 473 71 454 0
sel
3 156 476 205 427 0 0
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 128 10 0 \NUL
Bhandari, Suneet
22 12 54 80 34 0 \NUL
sugbhand
22 12 102 150 82 0 \NUL
CSE 12, Winter 2020
22 141 31 789 11 0 \NUL
My register 2 contains a flipflop and contains my Write Register Logic, which is one invertor and an
22 155 80 798 60 0 \NUL
through the AND gate. I used more logic gates to determine whether the input would come from the 
22 151 56 797 36 0 \NUL
AND gate since register 2 is 10 in the address which means it needs to be inverted in order to pass
22 153 104 780 84 0 \NUL
ALU or the keypad. The logic behind it is when the select switch is 0 the input is from the keypad
22 158 127 793 107 0 \NUL
and when the switch is 1 the output is from the ALU. Invertor for when select is 0 for the AND gate.
1 222 340 64 341
1 284 308 267 340
1 329 258 316 260
1 284 201 284 242
1 148 266 64 266
1 91 292 62 291
1 148 294 136 292
1 207 283 193 280
1 271 278 252 297
1 61 317 207 311
1 166 164 64 164
1 94 186 66 190
1 166 192 139 186
1 218 207 211 178
1 152 213 65 214
1 152 241 63 239
1 218 235 197 227
1 271 260 263 221
1 623 335 465 336
1 685 303 668 335
1 730 254 717 255
1 685 196 685 237
1 549 261 465 261
1 492 287 464 286
1 549 289 537 287
1 608 278 594 275
1 672 273 653 292
1 462 312 608 306
1 574 157 465 159
1 495 181 467 185
1 574 185 540 181
1 619 202 619 171
1 553 208 466 209
1 553 236 464 234
1 619 230 598 222
1 672 255 664 216
1 619 575 461 577
1 681 544 664 575
1 726 495 713 496
1 672 407 681 478
1 545 502 461 502
1 488 528 459 527
1 545 530 533 528
1 602 519 590 516
1 668 514 647 533
1 458 553 602 547
1 564 395 461 400
1 491 422 463 426
1 564 423 536 422
1 619 434 609 409
1 549 449 462 450
1 549 477 460 475
1 619 462 594 463
1 668 496 664 448
1 227 564 69 565
1 289 532 272 564
1 334 484 321 484
1 289 425 289 466
1 153 490 69 490
1 96 516 67 515
1 153 518 141 516
1 212 504 198 504
1 276 502 257 518
1 66 541 212 532
1 175 389 69 388
1 99 410 71 414
1 175 417 144 410
1 223 431 220 403
1 157 437 70 438
1 157 465 68 463
1 223 459 202 451
1 276 484 268 445
38 6
22 14 129 85 109 0 \NUL
Register 3
20 318 264 377 245 0
reg3_0
24 261 309 310 237 1 1 1
19 18 343 77 324 0
update
19 16 368 75 349 0
clear
5 110 383 159 334 0
15 234 230 283 181
19 16 311 75 292 0
wadr_1
19 15 285 74 266 0
wadr_0
3 87 312 136 263 0 0
3 144 327 193 278 0 0
19 10 186 69 167 0
kpad_0
4 208 261 257 212 0 0
3 153 208 202 159 0 0
19 11 207 70 188 0
sel
5 81 222 130 173 0
19 10 231 69 212 0
alu_0
19 8 256 67 237 0
sel
3 98 260 147 211 0 0
20 323 484 382 465 0
reg3_2
24 266 529 315 457 1 1 1
19 23 563 82 544 0
update
19 21 588 80 569 0
clear
5 197 594 246 545 0
15 239 450 288 401
19 21 531 80 512 0
wadr_1
19 20 505 79 486 0
wadr_0
3 92 532 141 483 0 0
3 149 547 198 498 0 0
19 15 406 74 387 0
kpad_2
4 213 481 262 432 0 0
3 158 428 207 379 0 0
19 16 427 75 408 0
sel
5 86 442 135 393 0
19 15 451 74 432 0
alu_2
19 13 476 72 457 0
sel
3 103 480 152 431 0 0
20 733 269 792 250 0
reg3_1
24 676 314 725 242 1 1 1
19 433 348 492 329 0
update
19 431 373 490 354 0
clear
5 525 388 574 339 0
15 649 235 698 186
19 431 316 490 297 0
wadr_1
19 430 290 489 271 0
wadr_0
3 502 317 551 268 0 0
3 559 332 608 283 0 0
19 425 191 484 172 0
kpad_1
4 623 266 672 217 0 0
3 568 213 617 164 0 0
19 426 212 485 193 0
sel
5 496 227 545 178 0
19 425 236 484 217 0
alu_1
19 423 261 482 242 0
sel
3 513 265 562 216 0 0
20 732 487 791 468 0
reg3_3
24 675 532 724 460 1 1 1
19 432 566 491 547 0
update
19 430 591 489 572 0
clear
5 594 600 643 551 0
15 648 453 697 404
19 430 534 489 515 0
wadr_1
19 429 508 488 489 0
wadr_0
3 501 535 550 486 0 0
3 558 550 607 501 0 0
19 424 409 483 390 0
kpad_3
4 622 484 671 435 0 0
3 567 431 616 382 0 0
19 425 430 484 411 0
sel
5 495 445 544 396 0
19 424 454 483 435 0
alu_3
19 422 479 481 460 0
sel
3 512 483 561 434 0 0
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 128 10 0 \NUL
Bhandari, Suneet
22 12 54 80 34 0 \NUL
sugbhand
22 12 102 150 82 0 \NUL
CSE 12, Winter 2020
22 141 32 751 12 0 \NUL
My register 2 contains a flipflop and contains my Write Register Logic, which is one AND gate
22 155 80 798 60 0 \NUL
through the AND gate. I used more logic gates to determine whether the input would come from the 
22 151 56 709 36 0 \NUL
and no invertors since register 3 is 11 in the address which means it already passes 
22 153 104 780 84 0 \NUL
ALU or the keypad. The logic behind it is when the select switch is 0 the input is from the keypad
22 158 127 793 107 0 \NUL
and when the switch is 1 the output is from the ALU. Invertor for when select is 0 for the AND gate.
1 111 358 72 358
1 275 305 156 358
1 319 254 307 257
1 280 205 275 239
1 88 273 71 275
1 88 301 72 301
1 145 316 74 333
1 145 288 133 287
1 262 275 190 302
1 154 169 66 176
1 82 197 67 197
1 154 197 127 197
1 209 222 199 183
1 99 221 66 221
1 209 250 144 235
1 99 249 64 246
1 262 257 254 236
1 198 569 77 578
1 280 525 243 569
1 324 474 312 477
1 285 425 280 459
1 93 493 76 495
1 93 521 77 521
1 150 536 79 553
1 150 508 138 507
1 267 495 195 522
1 159 389 71 396
1 87 417 72 417
1 159 417 132 417
1 214 442 204 403
1 104 441 71 441
1 214 470 149 455
1 104 469 69 466
1 267 477 259 456
1 526 363 487 363
1 690 310 571 363
1 734 259 722 262
1 695 210 690 244
1 503 278 486 280
1 503 306 487 306
1 560 321 489 338
1 560 293 548 292
1 677 280 605 307
1 569 174 481 181
1 497 202 482 202
1 569 202 542 202
1 624 227 614 188
1 514 226 481 226
1 624 255 559 240
1 514 254 479 251
1 677 262 669 241
1 595 575 486 581
1 689 528 640 575
1 733 477 721 480
1 694 428 689 462
1 502 496 485 498
1 502 524 486 524
1 559 539 488 556
1 559 511 547 510
1 676 498 604 525
1 568 392 480 399
1 496 420 481 420
1 568 420 541 420
1 623 445 613 406
1 513 444 480 444
1 623 473 558 458
1 513 472 478 469
1 676 480 668 459
38 7
20 335 270 394 251 0
in1_0
31 117 309 166 224 0 1
19 14 301 73 282 0
adr1_1
19 16 325 75 306 0
adr1_0
14 68 358 117 309
19 13 276 72 257 0
reg0_0
19 17 247 76 228 0
reg1_0
19 20 225 79 206 0
reg2_0
19 25 204 84 185 0
reg3_0
20 736 285 795 266 0
in1_1
31 545 316 594 231 0 1
19 442 308 501 289 0
adr1_1
19 444 332 503 313 0
adr1_0
14 496 365 545 316
19 441 283 500 264 0
reg0_1
19 443 258 502 239 0
reg1_1
19 451 233 510 214 0
reg2_1
19 458 210 517 191 0
reg3_1
20 327 495 386 476 0
in1_2
31 122 534 171 449 0 1
19 6 526 65 507 0
adr1_1
19 9 550 68 531 0
adr1_0
14 73 583 122 534
19 4 503 63 484 0
reg0_2
19 6 480 65 461 0
reg1_2
19 28 456 87 437 0
reg2_2
19 64 433 123 414 0
reg3_2
20 737 495 796 476 0
in1_3
31 558 530 607 445 0 1
19 455 522 514 503 0
adr1_1
19 457 546 516 527 0
adr1_0
14 509 579 558 530
19 454 497 513 478 0
reg0_3
19 456 472 515 453 0
reg1_3
19 464 447 523 428 0
reg2_3
19 485 423 544 404 0
reg3_3
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 128 10 0 \NUL
Bhandari, Suneet
22 12 54 80 34 0 \NUL
sugbhand
22 12 102 150 82 0 \NUL
CSE 12, Winter 2020
22 17 146 95 126 0 \NUL
ALU Input 1
22 144 34 790 14 0 \NUL
My ALU input 1 contains 4 muxes which each take in an input from each register 0 value to 3 value 
22 146 58 795 38 0 \NUL
dependent on the in1 value which could be 0,1,2, or 3. For example, all 0 register values match with
22 161 85 769 65 0 \NUL
in1_0 value. This happens all the way up to the in1_3 value which take all the register values
22 162 108 772 88 0 \NUL
which are 3. The select values are the Read Address's for the ALU input 1 to determine which 
22 157 132 794 112 0 \NUL
register the ALU input is going to obtain. I also used an AND gate to make sure the ALU inputs can
22 163 158 433 138 0 \NUL
only be seen when the select switch is 1.
1 118 287 70 291
1 118 293 72 315
1 118 305 114 333
1 118 269 69 266
1 118 263 73 237
1 118 257 76 215
1 118 251 81 194
1 546 294 498 298
1 546 300 500 322
1 546 312 542 340
1 546 276 497 273
1 546 270 499 248
1 546 264 507 223
1 546 258 514 200
1 123 512 62 516
1 123 518 65 540
1 123 530 119 558
1 123 494 60 493
1 123 488 62 470
1 123 482 84 446
1 123 476 120 423
1 559 508 511 512
1 559 514 513 536
1 559 526 555 554
1 559 490 510 487
1 559 484 512 462
1 559 478 520 437
1 559 472 541 413
1 163 263 336 260
1 591 270 737 275
1 168 488 328 485
1 604 484 738 485
38 8
20 334 270 393 251 0
in2_0
31 117 309 166 224 0 1
19 14 301 73 282 0
adr2_1
19 16 325 75 306 0
adr2_0
14 68 358 117 309
19 13 276 72 257 0
reg0_0
19 17 247 76 228 0
reg1_0
19 20 225 79 206 0
reg2_0
19 25 204 84 185 0
reg3_0
20 736 285 795 266 0
in2_1
31 545 316 594 231 0 1
19 442 308 501 289 0
adr2_1
19 444 332 503 313 0
adr2_0
14 496 365 545 316
19 441 283 500 264 0
reg0_1
19 443 258 502 239 0
reg1_1
19 451 233 510 214 0
reg2_1
19 458 210 517 191 0
reg3_1
20 327 495 386 476 0
in2_2
31 122 534 171 449 0 1
19 6 526 65 507 0
adr2_1
19 9 550 68 531 0
adr2_0
14 73 583 122 534
19 4 503 63 484 0
reg0_2
19 6 480 65 461 0
reg1_2
19 28 456 87 437 0
reg2_2
19 64 433 123 414 0
reg3_2
20 737 497 796 478 0
in2_3
31 558 530 607 445 0 1
19 455 522 514 503 0
adr2_1
19 457 546 516 527 0
adr2_0
14 509 579 558 530
19 454 497 513 478 0
reg0_3
19 456 472 515 453 0
reg1_3
19 464 447 523 428 0
reg2_3
19 485 423 544 404 0
reg3_3
22 26 146 104 126 0 \NUL
ALU Input 2
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 128 10 0 \NUL
Bhandari, Suneet
22 12 54 80 34 0 \NUL
sugbhand
22 12 102 150 82 0 \NUL
CSE 12, Winter 2020
22 144 34 790 14 0 \NUL
My ALU input 2 contains 4 muxes which each take in an input from each register 0 value to 3 value 
22 146 58 795 38 0 \NUL
dependent on the in2 value which could be 0,1,2, or 3. For example, all 0 register values match with
22 161 85 769 65 0 \NUL
in2_0 value. This happens all the way up to the in2_3 value which take all the register values
22 162 108 772 88 0 \NUL
which are 3. The select values are the Read Address's for the ALU input 2 to determine which 
22 157 132 794 112 0 \NUL
register the ALU input is going to obtain. I also used an AND gate to make sure the ALU inputs can
22 163 158 433 138 0 \NUL
only be seen when the select switch is 1.
1 118 287 70 291
1 118 293 72 315
1 118 305 114 333
1 118 269 69 266
1 118 263 73 237
1 118 257 76 215
1 118 251 81 194
1 546 294 498 298
1 546 300 500 322
1 546 312 542 340
1 546 276 497 273
1 546 270 499 248
1 546 264 507 223
1 546 258 514 200
1 123 512 62 516
1 123 518 65 540
1 123 530 119 558
1 123 494 60 493
1 123 488 62 470
1 123 482 84 446
1 123 476 120 423
1 559 508 511 512
1 559 514 513 536
1 559 526 555 554
1 559 490 510 487
1 559 484 512 462
1 559 478 520 437
1 559 472 541 413
1 163 263 335 260
1 168 488 328 485
1 604 484 738 487
1 591 270 737 275
38 9
19 15 285 74 266 0
in1_2
19 14 263 73 244 0
in1_1
19 14 333 73 314 0
in1_0
19 14 307 73 288 0
in1_3
31 167 319 216 234 0 1
14 85 401 134 352
19 431 284 490 265 0
in1_3
19 431 262 490 243 0
in1_2
19 430 330 489 311 0
in1_1
19 429 305 488 286 0
in1_0
31 583 318 632 233 0 1
20 686 287 745 268 0
alu_1
14 505 407 554 358
19 12 467 71 448 0
in1_0
19 12 445 71 426 0
in1_3
19 11 514 70 495 0
in1_2
19 11 489 70 470 0
in1_1
31 164 501 213 416 0 1
20 238 467 297 448 0
alu_2
14 86 590 135 541
19 419 467 478 448 0
in1_1
19 419 446 478 427 0
in1_0
19 418 515 477 496 0
in1_3
19 418 490 477 471 0
in1_2
31 571 502 620 417 0 1
20 652 465 711 446 0
alu_3
14 493 591 542 542
19 17 380 76 361 0
in2_0
19 17 358 76 339 0
in2_1
19 433 378 492 359 0
in2_0
19 433 353 492 334 0
in2_1
19 15 564 74 545 0
in2_0
19 15 541 74 522 0
in2_1
19 421 559 480 540 0
in2_0
19 418 538 477 519 0
in2_1
20 241 287 300 268 0
alu_0
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 128 10 0 \NUL
Bhandari, Suneet
22 12 54 80 34 0 \NUL
sugbhand
22 12 102 150 82 0 \NUL
CSE 12, Winter 2020
22 26 219 102 199 0 \NUL
ALU Output
22 161 33 734 13 0 \NUL
The ALU output contains 4, 4 to 1 muxes, each one responsible for a certian bit location.
22 161 58 698 38 0 \NUL
alu_0 is resposible for the 0 bit and so on until alu_3 is responisble for the 3rd bit.
22 163 79 779 59 0 \NUL
The 0 to 3 on the mux is inputed by the input from the Read Address 1 based on the amount of 
22 162 101 767 81 0 \NUL
rotations happening. The select inputs are filled out with only the last 2 bit digits of the Read 
22 75 128 788 108 0 \NUL
Address 2 since the 4 bit number can only be rotated 0 to 3 times meaning the other two digit are not needed. 
22 79 153 602 133 0 \NUL
These two digits determine how many times the 4 digit bit number is rotated left.
1 70 253 168 261
1 71 275 168 267
1 70 297 168 273
1 70 323 168 279
1 487 252 584 260
1 487 274 584 266
1 485 295 584 272
1 486 320 584 278
1 584 314 551 382
1 68 435 165 443
1 68 457 165 449
1 67 479 165 455
1 67 504 165 461
1 165 497 132 565
1 475 436 572 444
1 475 457 572 450
1 474 480 572 456
1 474 505 572 462
1 572 498 539 566
1 131 376 168 315
1 73 348 168 297
1 73 370 168 303
1 489 343 584 296
1 489 368 584 302
1 71 531 165 479
1 71 554 165 485
1 474 528 572 480
1 572 486 477 549
1 653 455 617 456
1 687 277 629 272
1 239 457 210 455
1 242 277 213 273
39 16777215
47 0
40 1 6 6
50 800 600
51 0 100
30
System
16
700
0
0
0
0
0
34
